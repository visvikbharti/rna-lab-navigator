# Generated by Django 4.2.10 on 2025-05-18 19:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("api", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="EnhancedFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.CharField(
                        choices=[
                            ("thumbs_up", "Thumbs Up"),
                            ("thumbs_down", "Thumbs Down"),
                            ("neutral", "Neutral"),
                        ],
                        max_length=15,
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                (
                    "specific_issues",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("relevance", "Answer Relevance"),
                            ("accuracy", "Information Accuracy"),
                            ("completeness", "Answer Completeness"),
                            ("clarity", "Clarity/Readability"),
                            ("citations", "Citation Quality"),
                            ("general", "General Feedback"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("reviewed", "Reviewed"),
                            ("actioned", "Actioned"),
                            ("ignored", "Ignored"),
                        ],
                        default="new",
                        max_length=20,
                    ),
                ),
                (
                    "relevance_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="How relevant was the answer to the query? (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "accuracy_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="How accurate was the information provided? (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "completeness_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="How complete was the answer? (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "clarity_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="How clear and readable was the answer? (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "citation_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="How accurate and helpful were the citations? (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "incorrect_sections",
                    models.JSONField(
                        blank=True,
                        help_text="Specific sections of the answer that were incorrect",
                        null=True,
                    ),
                ),
                (
                    "suggested_answer",
                    models.TextField(
                        blank=True,
                        help_text="User-suggested better answer or corrections",
                    ),
                ),
                (
                    "source_quality_issues",
                    models.JSONField(
                        blank=True,
                        help_text="Issues with the retrieved sources",
                        null=True,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                (
                    "system_response",
                    models.TextField(
                        blank=True,
                        help_text="System response to this feedback (e.g., improvements made)",
                    ),
                ),
                (
                    "improvement_actions",
                    models.JSONField(
                        blank=True,
                        help_text="Actions taken to improve the system based on this feedback",
                        null=True,
                    ),
                ),
                ("system_response_date", models.DateTimeField(blank=True, null=True)),
                (
                    "query_history",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enhanced_feedback",
                        to="api.queryhistory",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="enhanced_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Enhanced User Feedback",
                "verbose_name_plural": "Enhanced User Feedback",
            },
        ),
        migrations.CreateModel(
            name="FeedbackTheme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("investigating", "Investigating"),
                            ("implementing", "Implementing Solution"),
                            ("resolved", "Resolved"),
                            ("wontfix", "Won't Fix"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("critical", "Critical"),
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "feedback_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of feedback items in this theme"
                    ),
                ),
                ("first_reported", models.DateTimeField(auto_now_add=True)),
                ("last_reported", models.DateTimeField(auto_now=True)),
                ("solution_notes", models.TextField(blank=True)),
                ("resolution_date", models.DateTimeField(blank=True, null=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_themes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Feedback Theme",
                "verbose_name_plural": "Feedback Themes",
                "ordering": ["-feedback_count", "status"],
            },
        ),
        migrations.CreateModel(
            name="FeedbackCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("category", "Feedback Category"),
                            ("issue", "Specific Issue"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("display_order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent category for hierarchical organization",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="api_feedback.feedbackcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Feedback Category",
                "verbose_name_plural": "Feedback Categories",
                "ordering": ["display_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="FeedbackAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "analysis_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("date_range_start", models.DateTimeField()),
                ("date_range_end", models.DateTimeField()),
                ("analysis_date", models.DateTimeField(auto_now_add=True)),
                ("total_feedback_analyzed", models.PositiveIntegerField()),
                ("positive_feedback_count", models.PositiveIntegerField()),
                ("negative_feedback_count", models.PositiveIntegerField()),
                ("neutral_feedback_count", models.PositiveIntegerField()),
                ("top_issues", models.JSONField(default=list)),
                ("category_distribution", models.JSONField(default=dict)),
                ("improvement_opportunities", models.JSONField(default=list)),
                ("trend_analysis", models.JSONField(default=dict)),
                ("recommended_actions", models.JSONField(default=list)),
                ("priority_areas", models.JSONField(default=list)),
                ("actions_implemented", models.JSONField(default=list)),
                ("implementation_date", models.DateTimeField(blank=True, null=True)),
                ("effectiveness_metrics", models.JSONField(blank=True, default=dict)),
                (
                    "implemented_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="implemented_analyses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Feedback Analysis",
                "verbose_name_plural": "Feedback Analyses",
                "ordering": ["-analysis_date"],
            },
        ),
        migrations.CreateModel(
            name="FeedbackThemeMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("mapped_at", models.DateTimeField(auto_now_add=True)),
                (
                    "relevance_score",
                    models.FloatField(
                        default=1.0,
                        help_text="How relevant this feedback is to the theme (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "feedback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="theme_mappings",
                        to="api_feedback.enhancedfeedback",
                    ),
                ),
                (
                    "mapped_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "theme",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback_mappings",
                        to="api_feedback.feedbacktheme",
                    ),
                ),
            ],
            options={
                "verbose_name": "Feedback-Theme Mapping",
                "verbose_name_plural": "Feedback-Theme Mappings",
                "unique_together": {("feedback", "theme")},
            },
        ),
        migrations.AddIndex(
            model_name="enhancedfeedback",
            index=models.Index(fields=["rating"], name="api_feedbac_rating_e5a327_idx"),
        ),
        migrations.AddIndex(
            model_name="enhancedfeedback",
            index=models.Index(
                fields=["created_at"], name="api_feedbac_created_394933_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enhancedfeedback",
            index=models.Index(
                fields=["category"], name="api_feedbac_categor_2d30ef_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enhancedfeedback",
            index=models.Index(fields=["status"], name="api_feedbac_status_fd5faa_idx"),
        ),
    ]
