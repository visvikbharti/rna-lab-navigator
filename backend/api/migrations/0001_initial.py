# Generated by Django 4.2.10 on 2025-05-18 19:31

import api.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "doc_type",
                    models.CharField(
                        choices=[
                            ("thesis", "Thesis"),
                            ("protocol", "Protocol"),
                            ("paper", "Paper"),
                            ("inventory", "Inventory"),
                        ],
                        max_length=20,
                    ),
                ),
                ("author", models.CharField(blank=True, max_length=255)),
                ("year", models.PositiveIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="EvaluationRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("run_date", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("average_score", models.FloatField(blank=True, null=True)),
                (
                    "average_retrieval_precision",
                    models.FloatField(blank=True, null=True),
                ),
                ("average_answer_relevance", models.FloatField(blank=True, null=True)),
                ("total_questions", models.PositiveIntegerField(default=0)),
                ("success_count", models.PositiveIntegerField(default=0)),
                ("failure_count", models.PositiveIntegerField(default=0)),
                ("execution_time", models.FloatField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Evaluation Run",
                "verbose_name_plural": "Evaluation Runs",
                "ordering": ["-run_date"],
            },
        ),
        migrations.CreateModel(
            name="EvaluationSet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Evaluation Set",
                "verbose_name_plural": "Evaluation Sets",
            },
        ),
        migrations.CreateModel(
            name="QueryHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query_text", models.TextField()),
                ("answer", models.TextField()),
                ("confidence_score", models.FloatField()),
                ("sources", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="ReferenceQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField()),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("factoid", "Factoid"),
                            ("explanation", "Explanation"),
                            ("comparison", "Comparison"),
                            ("procedure", "Procedure"),
                            ("context", "Contextual"),
                        ],
                        max_length=20,
                    ),
                ),
                ("expected_answer", models.TextField()),
                ("expected_sources", models.JSONField(default=list)),
                ("doc_type", models.CharField(blank=True, max_length=20)),
                (
                    "difficulty",
                    models.PositiveIntegerField(
                        default=2,
                        help_text="Difficulty level (1-5)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "evaluation_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="api.evaluationset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reference Question",
                "verbose_name_plural": "Reference Questions",
            },
        ),
        migrations.CreateModel(
            name="QuestionResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer", models.TextField()),
                ("sources", models.JSONField(default=list)),
                ("confidence_score", models.FloatField()),
                ("retrieval_precision", models.FloatField()),
                ("answer_relevance", models.FloatField()),
                ("execution_time", models.FloatField(blank=True, null=True)),
                ("model_used", models.CharField(blank=True, max_length=50)),
                (
                    "evaluation_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="api.evaluationrun",
                    ),
                ),
                (
                    "reference_question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="api.referencequestion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question Result",
                "verbose_name_plural": "Question Results",
            },
        ),
        migrations.CreateModel(
            name="QueryCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "query_hash",
                    models.CharField(db_index=True, max_length=64, unique=True),
                ),
                ("query_text", models.TextField()),
                ("doc_type", models.CharField(blank=True, max_length=20)),
                ("answer", models.TextField()),
                ("sources", models.JSONField(default=list)),
                ("confidence_score", models.FloatField()),
                ("hit_count", models.PositiveIntegerField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["query_hash"], name="api_queryca_query_h_72a6c4_idx"
                    ),
                    models.Index(
                        fields=["last_accessed"], name="api_queryca_last_ac_22516c_idx"
                    ),
                    models.Index(
                        fields=["hit_count"], name="api_queryca_hit_cou_bb6e12_idx"
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="evaluationrun",
            name="evaluation_set",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="runs",
                to="api.evaluationset",
            ),
        ),
        migrations.CreateModel(
            name="Figure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("figure_id", models.CharField(max_length=100, unique=True)),
                (
                    "figure_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("chart", "Chart"),
                            ("graph", "Graph"),
                            ("table", "Table"),
                            ("diagram", "Diagram"),
                        ],
                        max_length=20,
                    ),
                ),
                ("caption", models.TextField(blank=True)),
                ("page_number", models.PositiveIntegerField()),
                ("file", models.FileField(upload_to=api.models.figure_upload_path)),
                ("embedding_vector", models.JSONField(blank=True, null=True)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="figures",
                        to="api.document",
                    ),
                ),
            ],
            options={
                "verbose_name": "Extracted Figure",
                "verbose_name_plural": "Extracted Figures",
                "indexes": [
                    models.Index(
                        fields=["figure_type"], name="api_figure_figure__21fcd9_idx"
                    ),
                    models.Index(
                        fields=["document"], name="api_figure_documen_b7831c_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.CharField(
                        choices=[
                            ("thumbs_up", "Thumbs Up"),
                            ("thumbs_down", "Thumbs Down"),
                        ],
                        max_length=15,
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                (
                    "specific_issues",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "retrieval_quality",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for the quality of retrieved information (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "answer_relevance",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for the relevance of the answer to the query (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "citation_accuracy",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating for the accuracy of citations in the answer (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "query_history",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="api.queryhistory",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Feedback",
                "verbose_name_plural": "User Feedback",
                "indexes": [
                    models.Index(
                        fields=["rating"], name="api_feedbac_rating_8d0b15_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="api_feedbac_created_2f98c8_idx"
                    ),
                ],
            },
        ),
    ]
