# Generated by Django 4.2.10 on 2025-05-18 19:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("api_feedback", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="QualityAnalysis",
            fields=[
                (
                    "analysis_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("general", "General Quality Analysis"),
                            ("topic_specific", "Topic-Specific Analysis"),
                            ("prompt_focused", "Prompt Optimization Analysis"),
                            ("retrieval_focused", "Retrieval Optimization Analysis"),
                            ("citation_focused", "Citation Quality Analysis"),
                        ],
                        default="general",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("date_range_start", models.DateTimeField()),
                ("date_range_end", models.DateTimeField()),
                ("feedback_count", models.PositiveIntegerField(default=0)),
                (
                    "feedback_filter",
                    models.JSONField(
                        blank=True,
                        help_text="JSON filters applied to select feedback for analysis",
                        null=True,
                    ),
                ),
                ("identified_issues", models.JSONField(blank=True, null=True)),
                ("issue_frequencies", models.JSONField(blank=True, null=True)),
                ("topic_clusters", models.JSONField(blank=True, null=True)),
                ("difficulty_assessment", models.JSONField(blank=True, null=True)),
                ("summary", models.TextField(blank=True)),
                ("primary_issues", models.JSONField(blank=True, null=True)),
                ("quality_score", models.FloatField(blank=True, null=True)),
                (
                    "related_themes",
                    models.ManyToManyField(
                        blank=True,
                        related_name="quality_analyses",
                        to="api_feedback.feedbacktheme",
                    ),
                ),
            ],
            options={
                "verbose_name": "Quality Analysis",
                "verbose_name_plural": "Quality Analyses",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QualityImprovement",
            fields=[
                (
                    "improvement_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "improvement_type",
                    models.CharField(
                        choices=[
                            ("prompt", "Prompt Improvement"),
                            ("retrieval", "Retrieval Configuration"),
                            ("citation", "Citation Enhancement"),
                            ("model", "Model Configuration"),
                            ("chunking", "Chunking Strategy"),
                            ("other", "Other Improvement"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("proposed", "Proposed"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("implemented", "Implemented"),
                            ("reverted", "Reverted"),
                        ],
                        default="proposed",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("critical", "Critical"),
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("implemented_at", models.DateTimeField(blank=True, null=True)),
                ("implementation_details", models.JSONField(blank=True, null=True)),
                ("expected_impact", models.TextField(blank=True)),
                ("implementation_effort", models.CharField(blank=True, max_length=50)),
                (
                    "impact_score",
                    models.FloatField(
                        blank=True, help_text="Estimated impact score (0-1)", null=True
                    ),
                ),
                ("actual_impact", models.TextField(blank=True)),
                ("impact_metrics", models.JSONField(blank=True, null=True)),
                ("before_metrics", models.JSONField(blank=True, null=True)),
                ("after_metrics", models.JSONField(blank=True, null=True)),
                ("target_issues", models.JSONField(blank=True, null=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_improvements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_improvements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_feedback",
                    models.ManyToManyField(
                        blank=True,
                        related_name="target_improvements",
                        to="api_feedback.enhancedfeedback",
                    ),
                ),
                (
                    "source_analysis",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="improvement_recommendations",
                        to="api_quality.qualityanalysis",
                    ),
                ),
            ],
            options={
                "verbose_name": "Quality Improvement",
                "verbose_name_plural": "Quality Improvements",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RetrievalConfiguration",
            fields=[
                (
                    "config_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("parameters", models.JSONField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("archived", "Archived"),
                            ("testing", "In Testing"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("activated_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("performance_metrics", models.JSONField(blank=True, null=True)),
                (
                    "topic_applicability",
                    models.JSONField(
                        blank=True,
                        help_text="Topics this configuration is optimized for",
                        null=True,
                    ),
                ),
                ("usage_count", models.PositiveIntegerField(default=0)),
                ("avg_quality_score", models.FloatField(blank=True, null=True)),
                (
                    "previous_version",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_versions",
                        to="api_quality.retrievalconfiguration",
                    ),
                ),
                (
                    "source_improvement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resulting_configs",
                        to="api_quality.qualityimprovement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Retrieval Configuration",
                "verbose_name_plural": "Retrieval Configurations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ImprovedPrompt",
            fields=[
                (
                    "prompt_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "prompt_type",
                    models.CharField(
                        choices=[
                            ("system", "System Prompt"),
                            ("answer_generation", "Answer Generation Prompt"),
                            ("citation", "Citation Prompt"),
                            ("specialized", "Specialized Topic Prompt"),
                        ],
                        max_length=50,
                    ),
                ),
                ("prompt_text", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("archived", "Archived"),
                            ("testing", "In Testing"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("activated_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.PositiveIntegerField(default=1)),
                ("performance_metrics", models.JSONField(blank=True, null=True)),
                (
                    "topic_applicability",
                    models.JSONField(
                        blank=True,
                        help_text="Topics this prompt is optimized for",
                        null=True,
                    ),
                ),
                ("usage_count", models.PositiveIntegerField(default=0)),
                ("avg_quality_score", models.FloatField(blank=True, null=True)),
                (
                    "previous_version",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_versions",
                        to="api_quality.improvedprompt",
                    ),
                ),
                (
                    "source_improvement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resulting_prompts",
                        to="api_quality.qualityimprovement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Improved Prompt",
                "verbose_name_plural": "Improved Prompts",
                "ordering": ["-created_at"],
            },
        ),
    ]
