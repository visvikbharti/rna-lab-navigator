name: RNA Lab Navigator CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rna_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov
        
    - name: Create .env file
      run: |
        cd backend
        cp .env.example .env
        echo "POSTGRES_DB=rna_test_db" >> .env
        echo "WEAVIATE_URL=http://localhost:8080" >> .env
        echo "OPENAI_API_KEY=sk-test-key-for-ci" >> .env
    
    - name: Run linting
      run: |
        cd backend
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only --profile black .
    
    - name: Run pytest
      run: |
        cd backend
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run backend security scan
      run: |
        cd backend
        bandit -r . -x ./venv,./tests,./migrations -f json -o bandit-results.json || true
        safety check -r requirements.txt --full-report --output json > safety-results.json || true
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Run frontend security scan
      run: |
        cd frontend
        npm audit --json > npm-audit-results.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          backend/bandit-results.json
          backend/safety-results.json
          frontend/npm-audit-results.json

  build-test:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build backend Docker image
      run: |
        docker build -t rna-lab-backend:test ./backend
    
    - name: Build frontend Docker image
      run: |
        docker build -t rna-lab-frontend:test ./frontend
    
    - name: Test Docker images
      run: |
        docker images
        docker run --rm rna-lab-backend:test python -c "print('Backend build successful!')"
        docker run --rm rna-lab-frontend:test node -e "console.log('Frontend build successful!')"